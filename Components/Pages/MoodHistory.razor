@page "/moodhistory"
@using MoodSync.Data
@using Radzen.Blazor
@inject MoodSyncContext DbContext

<PageTitle>Mood History</PageTitle>
<h1>Mood History</h1>
<div class="chart-container">
    <RadzenChart>
        <RadzenLineSeries Data="@moodData" CategoryProperty="Time" Title="Mood" ValueProperty="Value" Smooth="true" StrokeWidth="0">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenValueAxis Min="0" Max="7" Step="1" />
        <RadzenCategoryAxis Padding="20" />
        <RadzenGridLines Stroke="lightgray" StrokeWidth="1" />
            
    </RadzenChart>
</div>

@code {
    class MoodDataPoint
    {
        public double Time { get; set; }
        public int Value { get; set; }
    }

    private List<MoodDataPoint> moodData = new List<MoodDataPoint>();
    private DateTime selectedDate = DateTime.Today; // Default to today

    protected override void OnInitialized()
    {
        LoadMoodData();
    }

    private void LoadMoodData()
    {
        // Filter entries for the selected day
        var startOfDay = selectedDate.Date;
        var endOfDay = startOfDay.AddDays(1);


        var entries = DbContext.MoodEntries
            .Where(e => e.Timestamp >= startOfDay && e.Timestamp < endOfDay)
            .OrderBy(e => e.Timestamp)
            .ToList();
        
        moodData.Add(new MoodDataPoint { Time = 0.0, Value = 0 });
        moodData.Add(new MoodDataPoint { Time = 24.0, Value = 0 });

        foreach (var entry in entries)
        {
            int value = entry.Mood switch
            {
                "7" => 7,
                "6" => 6,
                "5" => 5,
                "4" => 4,
                "3" => 3,
                "2" => 2,
                "1" => 1,
                _ => 0
            };

            double hourOfDay = entry.Timestamp.TimeOfDay.TotalHours;

            moodData.Add(new MoodDataPoint 
            { 
                Time = hourOfDay,
                Value = value
            });
        }
    }

    private string GetMarkerColor(int value)
    {
        return value switch
        {
            1 => "#ff4d4d", // Red (lowest)
            2 => "#ff8c66",
            3 => "#ffbf80",
            4 => "#ffd966", // Yellow (neutral)
            5 => "#b3ff99",
            6 => "#80ffbf",
            7 => "#4dff88", // Green (highest)
            _ => "#d3d3d3"
        };
    }

    private async Task RefreshChart()
    {
        moodData.Clear();
        LoadMoodData();
        StateHasChanged(); // Force re-render
        await Task.CompletedTask;
    }
}