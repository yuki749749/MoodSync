@page "/moodhistory"
@using MoodSync.Data
@using Radzen.Blazor
@inject MoodSyncContext DbContext

<PageTitle>Mood History</PageTitle>
<h1>Mood History</h1>
<div class="chart-container">
    <RadzenChart>
        <RadzenLineSeries Data="@moodData" CategoryProperty="Date" Title=" " ValueProperty="Value" Smooth="true" StrokeWidth="0">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenValueAxis Min="0" Max="7" Step="1" />
        <RadzenCategoryAxis Padding="20" />
    </RadzenChart>
</div>

@code {
    class MoodDataPoint
    {
        public string Date { get; set; }
        public int Value { get; set; }
    }

    private List<MoodDataPoint> moodData = new List<MoodDataPoint>();

    protected override void OnInitialized()
    {
        LoadMoodData();
    }

    private void LoadMoodData()
    {
        var entries = DbContext.MoodEntries
            .OrderByDescending(e => e.Timestamp)
            .Take(7)
            .OrderBy(e => e.Timestamp)
            .ToList();

        foreach (var entry in entries)
        {
            int value = entry.Mood switch
            {
                "7" => 7,
                "6" => 6,
                "5" => 5,
                "4" => 4,
                "3" => 3,
                "2" => 2,
                "1" => 1,
                _ => 0
            };
            
            moodData.Add(new MoodDataPoint 
            { 
                Date = entry.Timestamp.ToString("MM/dd HH:mm"),
                Value = value
            });
        }
    }

    private string GetMarkerColor(int value)
    {
        return value switch
        {
            1 => "#ff4d4d", // Red (lowest)
            2 => "#ff8c66",
            3 => "#ffbf80",
            4 => "#ffd966", // Yellow (neutral)
            5 => "#b3ff99",
            6 => "#80ffbf",
            7 => "#4dff88", // Green (highest)
            _ => "#d3d3d3"
        };
    }




    private async Task RefreshChart()
    {
        moodData.Clear();
        LoadMoodData();
        StateHasChanged(); // Force re-render
        await Task.CompletedTask; // For async compatibility
    }
}